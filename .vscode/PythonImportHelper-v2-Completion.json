[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "emails",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emails",
        "description": "emails",
        "detail": "emails",
        "documentation": {}
    },
    {
        "label": "emails.loader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emails.loader",
        "description": "emails.loader",
        "detail": "emails.loader",
        "documentation": {}
    },
    {
        "label": "JinjaTemplate",
        "importPath": "emails.template",
        "description": "emails.template",
        "isExtraImport": true,
        "detail": "emails.template",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "DbDep",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "DbDep",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_active_superuser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "DbDep",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "DbDep",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_active_superuser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_active_superuser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemsPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PyObjectId",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "NewPassword",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UpdatePassword",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserRegister",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UsersPublic",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdateMe",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PyObjectId",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PyObjectId",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "security",
        "importPath": "app.core",
        "description": "app.core",
        "isExtraImport": true,
        "detail": "app.core",
        "documentation": {}
    },
    {
        "label": "security",
        "importPath": "app.core",
        "description": "app.core",
        "isExtraImport": true,
        "detail": "app.core",
        "documentation": {}
    },
    {
        "label": "security",
        "importPath": "app.core",
        "description": "app.core",
        "isExtraImport": true,
        "detail": "app.core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_reset_password_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_new_account_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_test_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AnyUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BeforeValidator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "computed_field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic.networks",
        "description": "pydantic.networks",
        "isExtraImport": true,
        "detail": "pydantic.networks",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "items",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "private",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "create_random_item",
        "importPath": "app.tests.utils.item",
        "description": "app.tests.utils.item",
        "isExtraImport": true,
        "detail": "app.tests.utils.item",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "app.crud",
        "description": "app.crud",
        "isExtraImport": true,
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "user_authentication_headers",
        "importPath": "app.tests.utils.user",
        "description": "app.tests.utils.user",
        "isExtraImport": true,
        "detail": "app.tests.utils.user",
        "documentation": {}
    },
    {
        "label": "create_random_user",
        "importPath": "app.tests.utils.user",
        "description": "app.tests.utils.user",
        "isExtraImport": true,
        "detail": "app.tests.utils.user",
        "documentation": {}
    },
    {
        "label": "authentication_token_from_email",
        "importPath": "app.tests.utils.user",
        "description": "app.tests.utils.user",
        "isExtraImport": true,
        "detail": "app.tests.utils.user",
        "documentation": {}
    },
    {
        "label": "random_email",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_email",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_email",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_email",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_superuser_token_headers",
        "importPath": "app.tests.utils.utils",
        "description": "app.tests.utils.utils",
        "isExtraImport": true,
        "detail": "app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "pytest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_asyncio",
        "description": "pytest_asyncio",
        "detail": "pytest_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncMongoMockClient",
        "importPath": "mongomock_motor",
        "description": "mongomock_motor",
        "isExtraImport": true,
        "detail": "mongomock_motor",
        "documentation": {}
    },
    {
        "label": "after_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "before_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "after_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "before_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "sentry_sdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "APIRoute",
        "importPath": "fastapi.routing",
        "description": "fastapi.routing",
        "isExtraImport": true,
        "detail": "fastapi.routing",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "app.api.main",
        "description": "app.api.main",
        "isExtraImport": true,
        "detail": "app.api.main",
        "documentation": {}
    },
    {
        "label": "core_schema",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "MakeRFC822",
        "kind": 6,
        "importPath": "backend..venv.bin.make_rfc822",
        "description": "backend..venv.bin.make_rfc822",
        "peekOfCode": "class MakeRFC822:\n    def __init__(self, options):\n        self.options = options\n    def _headers_from_command_line(self):\n        \"\"\"\n        --add-header \"X-Source: AAA\"\n        \"\"\"\n        r = {}\n        if self.options.add_headers:\n            for s in self.options.add_headers:",
        "detail": "backend..venv.bin.make_rfc822",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.routes.items",
        "description": "backend.app.api.routes.items",
        "peekOfCode": "router = APIRouter(prefix=\"/items\", tags=[\"items\"])\nITEM_NOT_FOUND = \"Item not found\"\nNOT_ENOUGH_PERMISSIONS = \"Not enough permissions\"\n@router.get(\"/\", response_model=ItemsPublic)\nasync def read_items(\n    db: DbDep, current_user: CurrentUser, skip: int = 0, limit: int = 100\n) -> Any:\n    \"\"\"\n    Retrieve items.\n    \"\"\"",
        "detail": "backend.app.api.routes.items",
        "documentation": {}
    },
    {
        "label": "ITEM_NOT_FOUND",
        "kind": 5,
        "importPath": "backend.app.api.routes.items",
        "description": "backend.app.api.routes.items",
        "peekOfCode": "ITEM_NOT_FOUND = \"Item not found\"\nNOT_ENOUGH_PERMISSIONS = \"Not enough permissions\"\n@router.get(\"/\", response_model=ItemsPublic)\nasync def read_items(\n    db: DbDep, current_user: CurrentUser, skip: int = 0, limit: int = 100\n) -> Any:\n    \"\"\"\n    Retrieve items.\n    \"\"\"\n    if current_user.is_superuser:",
        "detail": "backend.app.api.routes.items",
        "documentation": {}
    },
    {
        "label": "NOT_ENOUGH_PERMISSIONS",
        "kind": 5,
        "importPath": "backend.app.api.routes.items",
        "description": "backend.app.api.routes.items",
        "peekOfCode": "NOT_ENOUGH_PERMISSIONS = \"Not enough permissions\"\n@router.get(\"/\", response_model=ItemsPublic)\nasync def read_items(\n    db: DbDep, current_user: CurrentUser, skip: int = 0, limit: int = 100\n) -> Any:\n    \"\"\"\n    Retrieve items.\n    \"\"\"\n    if current_user.is_superuser:\n        count = await db.items.count_documents({})",
        "detail": "backend.app.api.routes.items",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.routes.login",
        "description": "backend.app.api.routes.login",
        "peekOfCode": "router = APIRouter(tags=[\"login\"])\n@router.post(\"/login/access-token\")\nasync def login_access_token(\n    db: DbDep, form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n) -> Token:\n    \"\"\"\n    OAuth2 compatible token login, get an access token for future requests\n    \"\"\"\n    user = await crud.authenticate(\n        db=db, email=form_data.username, password=form_data.password",
        "detail": "backend.app.api.routes.login",
        "documentation": {}
    },
    {
        "label": "PrivateUserCreate",
        "kind": 6,
        "importPath": "backend.app.api.routes.private",
        "description": "backend.app.api.routes.private",
        "peekOfCode": "class PrivateUserCreate(BaseModel):\n    email: str\n    password: str\n    full_name: str\n    is_verified: bool = False\n@router.post(\"/users/\", response_model=UserPublic)\nasync def create_user(user_in: PrivateUserCreate, db: DbDep) -> Any:\n    \"\"\"\n    Create a new user.\n    \"\"\"",
        "detail": "backend.app.api.routes.private",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.routes.private",
        "description": "backend.app.api.routes.private",
        "peekOfCode": "router = APIRouter(tags=[\"private\"], prefix=\"/private\")\nclass PrivateUserCreate(BaseModel):\n    email: str\n    password: str\n    full_name: str\n    is_verified: bool = False\n@router.post(\"/users/\", response_model=UserPublic)\nasync def create_user(user_in: PrivateUserCreate, db: DbDep) -> Any:\n    \"\"\"\n    Create a new user.",
        "detail": "backend.app.api.routes.private",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.routes.users",
        "description": "backend.app.api.routes.users",
        "peekOfCode": "router = APIRouter(prefix=\"/users\", tags=[\"users\"])\n@router.get(\n    \"/\",\n    dependencies=[Depends(get_current_active_superuser)],\n    response_model=UsersPublic,\n)\nasync def read_users(db: DbDep, skip: int = 0, limit: int = 100) -> Any:\n    \"\"\"\n    Retrieve users.\n    \"\"\"",
        "detail": "backend.app.api.routes.users",
        "documentation": {}
    },
    {
        "label": "test_email",
        "kind": 2,
        "importPath": "backend.app.api.routes.utils",
        "description": "backend.app.api.routes.utils",
        "peekOfCode": "def test_email(email_to: EmailStr) -> Message:\n    \"\"\"\n    Test emails.\n    \"\"\"\n    email_data = generate_test_email(email_to=email_to)\n    send_email(\n        email_to=email_to,\n        subject=email_data.subject,\n        html_content=email_data.html_content,\n    )",
        "detail": "backend.app.api.routes.utils",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.routes.utils",
        "description": "backend.app.api.routes.utils",
        "peekOfCode": "router = APIRouter(prefix=\"/utils\", tags=[\"utils\"])\n@router.post(\n    \"/test-email/\",\n    dependencies=[Depends(get_current_active_superuser)],\n    status_code=status.HTTP_201_CREATED,\n)\ndef test_email(email_to: EmailStr) -> Message:\n    \"\"\"\n    Test emails.\n    \"\"\"",
        "detail": "backend.app.api.routes.utils",
        "documentation": {}
    },
    {
        "label": "get_current_active_superuser",
        "kind": 2,
        "importPath": "backend.app.api.deps",
        "description": "backend.app.api.deps",
        "peekOfCode": "def get_current_active_superuser(current_user: CurrentUser) -> User:\n    if not current_user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user doesn't have enough privileges\",\n        )\n    return current_user",
        "detail": "backend.app.api.deps",
        "documentation": {}
    },
    {
        "label": "reusable_oauth2",
        "kind": 5,
        "importPath": "backend.app.api.deps",
        "description": "backend.app.api.deps",
        "peekOfCode": "reusable_oauth2 = OAuth2PasswordBearer(\n    tokenUrl=f\"{settings.API_V1_STR}/login/access-token\"\n)\nasync def get_db() -> AsyncGenerator[AsyncIOMotorClient, None]:\n    client = AsyncIOMotorClient(settings.MONGODB_URI)\n    db = client[settings.MONGODB_DB_NAME]\n    yield db\nDbDep = Annotated[AsyncIOMotorClient, Depends(get_db)]\nTokenDep = Annotated[str, Depends(reusable_oauth2)]\nasync def get_current_user(db: DbDep, token: TokenDep) -> User:",
        "detail": "backend.app.api.deps",
        "documentation": {}
    },
    {
        "label": "DbDep",
        "kind": 5,
        "importPath": "backend.app.api.deps",
        "description": "backend.app.api.deps",
        "peekOfCode": "DbDep = Annotated[AsyncIOMotorClient, Depends(get_db)]\nTokenDep = Annotated[str, Depends(reusable_oauth2)]\nasync def get_current_user(db: DbDep, token: TokenDep) -> User:\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[security.ALGORITHM]\n        )\n        token_data = TokenPayload(**payload)\n    except (InvalidTokenError, ValidationError):\n        raise HTTPException(",
        "detail": "backend.app.api.deps",
        "documentation": {}
    },
    {
        "label": "TokenDep",
        "kind": 5,
        "importPath": "backend.app.api.deps",
        "description": "backend.app.api.deps",
        "peekOfCode": "TokenDep = Annotated[str, Depends(reusable_oauth2)]\nasync def get_current_user(db: DbDep, token: TokenDep) -> User:\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[security.ALGORITHM]\n        )\n        token_data = TokenPayload(**payload)\n    except (InvalidTokenError, ValidationError):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,",
        "detail": "backend.app.api.deps",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "kind": 5,
        "importPath": "backend.app.api.deps",
        "description": "backend.app.api.deps",
        "peekOfCode": "CurrentUser = Annotated[User, Depends(get_current_user)]\ndef get_current_active_superuser(current_user: CurrentUser) -> User:\n    if not current_user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user doesn't have enough privileges\",\n        )\n    return current_user",
        "detail": "backend.app.api.deps",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "backend.app.api.main",
        "description": "backend.app.api.main",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(login.router)\napi_router.include_router(users.router)\napi_router.include_router(utils.router)\napi_router.include_router(items.router)\nif settings.ENVIRONMENT == \"local\":\n    api_router.include_router(private.router)",
        "detail": "backend.app.api.main",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_ignore_empty=True,\n        extra=\"ignore\",\n    )\n    API_V1_STR: str = \"/api/v1\"\n    SECRET_KEY: str = secrets.token_urlsafe(32)\n    # 60 minutes * 24 hours * 8 days = 8 days\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "parse_cors",
        "kind": 2,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "def parse_cors(v: Any) -> list[str] | str:\n    if isinstance(v, str) and not v.startswith(\"[\"):\n        return [i.strip() for i in v.split(\",\")]\n    elif isinstance(v, list | str):\n        return v\n    raise ValueError(v)\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_ignore_empty=True,",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "settings = Settings()  # type: ignore",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "def create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    expire = datetime.now(timezone.utc) + expires_delta\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "def get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nALGORITHM = \"HS256\"\ndef create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    expire = datetime.now(timezone.utc) + expires_delta\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "ALGORITHM = \"HS256\"\ndef create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    expire = datetime.now(timezone.utc) + expires_delta\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "test_read_item_not_found",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_items",
        "description": "backend.app.tests.api.routes.test_items",
        "peekOfCode": "def test_read_item_not_found(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    response = client.get(\n        f\"{settings.API_V1_STR}/items/{ObjectId()}\",\n        headers=superuser_token_headers,\n    )\n    assert response.status_code == 404\n    content = response.json()\n    assert content[\"detail\"] == \"Item not found\"",
        "detail": "backend.app.tests.api.routes.test_items",
        "documentation": {}
    },
    {
        "label": "test_update_item_not_found",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_items",
        "description": "backend.app.tests.api.routes.test_items",
        "peekOfCode": "def test_update_item_not_found(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    data = {\"title\": \"Updated title\", \"description\": \"Updated description\"}\n    response = client.put(\n        f\"{settings.API_V1_STR}/items/{ObjectId()}\",\n        headers=superuser_token_headers,\n        json=data,\n    )\n    assert response.status_code == 404",
        "detail": "backend.app.tests.api.routes.test_items",
        "documentation": {}
    },
    {
        "label": "test_delete_item_not_found",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_items",
        "description": "backend.app.tests.api.routes.test_items",
        "peekOfCode": "def test_delete_item_not_found(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    response = client.delete(\n        f\"{settings.API_V1_STR}/items/{ObjectId()}\",\n        headers=superuser_token_headers,\n    )\n    assert response.status_code == 404\n    content = response.json()\n    assert content[\"detail\"] == \"Item not found\"",
        "detail": "backend.app.tests.api.routes.test_items",
        "documentation": {}
    },
    {
        "label": "test_get_access_token",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_login",
        "description": "backend.app.tests.api.routes.test_login",
        "peekOfCode": "def test_get_access_token(client: TestClient) -> None:\n    \"\"\"Test obtaining access token with valid credentials\"\"\"\n    login_data = {\n        \"username\": settings.FIRST_SUPERUSER,\n        \"password\": settings.FIRST_SUPERUSER_PASSWORD,\n    }\n    response = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=login_data)\n    tokens = response.json()\n    assert response.status_code == 200\n    assert \"access_token\" in tokens",
        "detail": "backend.app.tests.api.routes.test_login",
        "documentation": {}
    },
    {
        "label": "test_get_access_token_incorrect_password",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_login",
        "description": "backend.app.tests.api.routes.test_login",
        "peekOfCode": "def test_get_access_token_incorrect_password(client: TestClient) -> None:\n    \"\"\"Test failed login with incorrect password\"\"\"\n    login_data = {\n        \"username\": settings.FIRST_SUPERUSER,\n        \"password\": \"incorrect\",\n    }\n    response = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=login_data)\n    assert response.status_code == 400\ndef test_use_access_token(\n    client: TestClient, superuser_token_headers: dict[str, str]",
        "detail": "backend.app.tests.api.routes.test_login",
        "documentation": {}
    },
    {
        "label": "test_use_access_token",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_login",
        "description": "backend.app.tests.api.routes.test_login",
        "peekOfCode": "def test_use_access_token(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    \"\"\"Test token validation endpoint\"\"\"\n    response = client.post(\n        f\"{settings.API_V1_STR}/login/test-token\",\n        headers=superuser_token_headers,\n    )\n    result = response.json()\n    assert response.status_code == 200",
        "detail": "backend.app.tests.api.routes.test_login",
        "documentation": {}
    },
    {
        "label": "test_recovery_password_user_not_exists",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_login",
        "description": "backend.app.tests.api.routes.test_login",
        "peekOfCode": "def test_recovery_password_user_not_exists(client: TestClient) -> None:\n    \"\"\"Test recovery for non-existent user\"\"\"\n    email = \"nonexistent@example.com\"\n    response = client.post(f\"{settings.API_V1_STR}/password-recovery/{email}\")\n    assert response.status_code == 404\n@pytest.mark.asyncio\nasync def test_reset_password(client: TestClient, db: AsyncIOMotorDatabase) -> None:\n    \"\"\"Test password reset flow\"\"\"\n    email = random_email()\n    password = random_lower_string()",
        "detail": "backend.app.tests.api.routes.test_login",
        "documentation": {}
    },
    {
        "label": "test_reset_password_invalid_token",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_login",
        "description": "backend.app.tests.api.routes.test_login",
        "peekOfCode": "def test_reset_password_invalid_token(client: TestClient) -> None:\n    \"\"\"Test password reset with invalid token\"\"\"\n    data = {\"new_password\": \"newpassword\", \"token\": \"invalid\"}\n    response = client.post(\n        f\"{settings.API_V1_STR}/reset-password/\",\n        json=data,\n    )\n    result = response.json()\n    assert response.status_code == 400\n    assert result[\"detail\"] == \"Invalid token\"",
        "detail": "backend.app.tests.api.routes.test_login",
        "documentation": {}
    },
    {
        "label": "test_get_users_superuser_me",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_users",
        "description": "backend.app.tests.api.routes.test_users",
        "peekOfCode": "def test_get_users_superuser_me(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    response = client.get(\n        f\"{settings.API_V1_STR}/users/me\", headers=superuser_token_headers\n    )\n    current_user = response.json()\n    assert current_user\n    assert current_user[\"is_active\"] is True\n    assert current_user[\"is_superuser\"]",
        "detail": "backend.app.tests.api.routes.test_users",
        "documentation": {}
    },
    {
        "label": "test_get_users_normal_user_me",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_users",
        "description": "backend.app.tests.api.routes.test_users",
        "peekOfCode": "def test_get_users_normal_user_me(\n    client: TestClient, normal_user_token_headers: dict[str, str]\n) -> None:\n    response = client.get(\n        f\"{settings.API_V1_STR}/users/me\", headers=normal_user_token_headers\n    )\n    current_user = response.json()\n    assert current_user\n    assert current_user[\"is_active\"] is True\n    assert current_user[\"is_superuser\"] is False",
        "detail": "backend.app.tests.api.routes.test_users",
        "documentation": {}
    },
    {
        "label": "test_delete_user_not_found",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_users",
        "description": "backend.app.tests.api.routes.test_users",
        "peekOfCode": "def test_delete_user_not_found(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    response = client.delete(\n        f\"{settings.API_V1_STR}/users/{ObjectId()}\",\n        headers=superuser_token_headers,\n    )\n    assert response.status_code == 404\n    assert response.json()[\"detail\"] == \"User not found\"\n# Test updating password",
        "detail": "backend.app.tests.api.routes.test_users",
        "documentation": {}
    },
    {
        "label": "test_update_password_me_incorrect_password",
        "kind": 2,
        "importPath": "backend.app.tests.api.routes.test_users",
        "description": "backend.app.tests.api.routes.test_users",
        "peekOfCode": "def test_update_password_me_incorrect_password(\n    client: TestClient, superuser_token_headers: dict[str, str]\n) -> None:\n    new_password = random_lower_string()\n    data = {\"current_password\": \"wrongpassword\", \"new_password\": new_password}\n    response = client.patch(\n        f\"{settings.API_V1_STR}/users/me/password\",\n        headers=superuser_token_headers,\n        json=data,\n    )",
        "detail": "backend.app.tests.api.routes.test_users",
        "documentation": {}
    },
    {
        "label": "user_authentication_headers",
        "kind": 2,
        "importPath": "backend.app.tests.utils.user",
        "description": "backend.app.tests.utils.user",
        "peekOfCode": "def user_authentication_headers(\n    *, client: TestClient, email: str, password: str\n) -> dict[str, str]:\n    data = {\"username\": email, \"password\": password}\n    r = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=data)\n    response = r.json()\n    auth_token = response[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {auth_token}\"}\n    return headers\nasync def create_random_user(db: AsyncIOMotorDatabase) -> User:",
        "detail": "backend.app.tests.utils.user",
        "documentation": {}
    },
    {
        "label": "random_lower_string",
        "kind": 2,
        "importPath": "backend.app.tests.utils.utils",
        "description": "backend.app.tests.utils.utils",
        "peekOfCode": "def random_lower_string() -> str:\n    return \"\".join(random.choices(string.ascii_lowercase, k=32))\ndef random_email() -> str:\n    return f\"{random_lower_string()}@{random_lower_string()}.com\"\ndef get_superuser_token_headers(client: TestClient) -> dict[str, str]:\n    login_data = {\n        \"username\": settings.FIRST_SUPERUSER,\n        \"password\": settings.FIRST_SUPERUSER_PASSWORD,\n    }\n    r = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=login_data)",
        "detail": "backend.app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "random_email",
        "kind": 2,
        "importPath": "backend.app.tests.utils.utils",
        "description": "backend.app.tests.utils.utils",
        "peekOfCode": "def random_email() -> str:\n    return f\"{random_lower_string()}@{random_lower_string()}.com\"\ndef get_superuser_token_headers(client: TestClient) -> dict[str, str]:\n    login_data = {\n        \"username\": settings.FIRST_SUPERUSER,\n        \"password\": settings.FIRST_SUPERUSER_PASSWORD,\n    }\n    r = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=login_data)\n    tokens = r.json()\n    a_token = tokens[\"access_token\"]",
        "detail": "backend.app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_superuser_token_headers",
        "kind": 2,
        "importPath": "backend.app.tests.utils.utils",
        "description": "backend.app.tests.utils.utils",
        "peekOfCode": "def get_superuser_token_headers(client: TestClient) -> dict[str, str]:\n    login_data = {\n        \"username\": settings.FIRST_SUPERUSER,\n        \"password\": settings.FIRST_SUPERUSER_PASSWORD,\n    }\n    r = client.post(f\"{settings.API_V1_STR}/login/access-token\", data=login_data)\n    tokens = r.json()\n    a_token = tokens[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {a_token}\"}\n    return headers",
        "detail": "backend.app.tests.utils.utils",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "backend.app.tests.conftest",
        "description": "backend.app.tests.conftest",
        "peekOfCode": "def client(db) -> Generator[TestClient, None, None]:\n    from app.main import app\n    async def override_get_db():\n        yield db\n    app.dependency_overrides[get_db] = override_get_db\n    with TestClient(app) as c:\n        yield c\n    app.dependency_overrides.clear()\n@pytest_asyncio.fixture(scope=\"module\")\ndef superuser_token_headers(client: TestClient) -> dict[str, str]:",
        "detail": "backend.app.tests.conftest",
        "documentation": {}
    },
    {
        "label": "superuser_token_headers",
        "kind": 2,
        "importPath": "backend.app.tests.conftest",
        "description": "backend.app.tests.conftest",
        "peekOfCode": "def superuser_token_headers(client: TestClient) -> dict[str, str]:\n    return get_superuser_token_headers(client)\n@pytest_asyncio.fixture(scope=\"module\")\nasync def normal_user_token_headers(client: TestClient, db) -> dict[str, str]:\n    return await authentication_token_from_email(\n        client=client, email=settings.EMAIL_TEST_USER, db=db\n    )",
        "detail": "backend.app.tests.conftest",
        "documentation": {}
    },
    {
        "label": "MongoHandler",
        "kind": 6,
        "importPath": "backend.app.tests.mongo_client",
        "description": "backend.app.tests.mongo_client",
        "peekOfCode": "class MongoHandler:\n    def __init__(self, db_name: str, collection_name: str):\n        self.__db_name = db_name\n        self.__collection_name = collection_name\n        self.__db_client = AsyncMongoMockClient()\n    def __getattr__(self, name: str):\n        \"\"\"\n        Allows access like db.users, db.items, etc.\n        Equivalent to: self.__db_client[self.__db_name][name]\n        \"\"\"",
        "detail": "backend.app.tests.mongo_client",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "kind": 6,
        "importPath": "backend.app.tests.mongo_client",
        "description": "backend.app.tests.mongo_client",
        "peekOfCode": "class MongoClient:\n    def __init__(self, db_name: str, collection_name: str):\n        self.__db_handler = MongoHandler(db_name, collection_name)\n    async def __aenter__(self):\n        return self.__db_handler\n    async def __aexit__(self, exception_type, exception_value, exception_traceback):\n        if exception_type:\n            logging.error(exception_value)\n        await self.__db_handler.drop_database()\n        self.__db_handler.close_conn()",
        "detail": "backend.app.tests.mongo_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.app.backend_pre_start",
        "description": "backend.app.backend_pre_start",
        "peekOfCode": "logger = logging.getLogger(__name__)\nmax_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:",
        "detail": "backend.app.backend_pre_start",
        "documentation": {}
    },
    {
        "label": "max_tries",
        "kind": 5,
        "importPath": "backend.app.backend_pre_start",
        "description": "backend.app.backend_pre_start",
        "peekOfCode": "max_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:\n    try:",
        "detail": "backend.app.backend_pre_start",
        "documentation": {}
    },
    {
        "label": "wait_seconds",
        "kind": 5,
        "importPath": "backend.app.backend_pre_start",
        "description": "backend.app.backend_pre_start",
        "peekOfCode": "wait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:\n    try:\n        client = AsyncIOMotorClient(settings.MONGODB_URI)",
        "detail": "backend.app.backend_pre_start",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.app.initial_data",
        "description": "backend.app.initial_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def init() -> None:\n    # Initialize MongoDB connection\n    client = AsyncIOMotorClient(settings.MONGODB_URI)\n    db = client[settings.MONGODB_DB_NAME]\n    await init_db(db)\nasync def main() -> None:\n    logger.info(\"Creating initial data\")\n    await init()\n    logger.info(\"Initial data created\")",
        "detail": "backend.app.initial_data",
        "documentation": {}
    },
    {
        "label": "custom_generate_unique_id",
        "kind": 2,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "def custom_generate_unique_id(route: APIRoute) -> str:\n    return f\"{route.tags[0]}-{route.name}\"\nif settings.SENTRY_DSN and settings.ENVIRONMENT != \"local\":\n    sentry_sdk.init(dsn=str(settings.SENTRY_DSN), enable_tracing=True)\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    openapi_url=f\"{settings.API_V1_STR}/openapi.json\",\n    generate_unique_id_function=custom_generate_unique_id,\n)\n# Set all CORS enabled origins",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "app = FastAPI(\n    title=settings.PROJECT_NAME,\n    openapi_url=f\"{settings.API_V1_STR}/openapi.json\",\n    generate_unique_id_function=custom_generate_unique_id,\n)\n# Set all CORS enabled origins\nif settings.all_cors_origins:\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=settings.all_cors_origins,",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "PyObjectId",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class PyObjectId:\n    @classmethod\n    def __get_pydantic_core_schema__(  # type: ignore[misc]\n        cls, _source_type: Any, _handler: Any\n    ) -> core_schema.CoreSchema:\n        return core_schema.json_or_python_schema(\n            json_schema=core_schema.str_schema(),\n            python_schema=core_schema.union_schema(\n                [\n                    core_schema.is_instance_schema(ObjectId),",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserBase(BaseModel):\n    email: EmailStr = Field(..., json_schema_extra={\"unique\": True}, max_length=255)\n    is_active: bool = True\n    is_superuser: bool = False\n    full_name: Optional[str] = Field(default=None, max_length=255)\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=40)\nclass UserRegister(BaseModel):\n    email: EmailStr = Field(..., max_length=255)\n    password: str = Field(..., min_length=8, max_length=40)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=40)\nclass UserRegister(BaseModel):\n    email: EmailStr = Field(..., max_length=255)\n    password: str = Field(..., min_length=8, max_length=40)\n    full_name: Optional[str] = Field(default=None, max_length=255)\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = Field(default=None, max_length=255)\n    password: Optional[str] = Field(default=None, min_length=8, max_length=40)\n    is_active: Optional[bool] = None",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserRegister",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserRegister(BaseModel):\n    email: EmailStr = Field(..., max_length=255)\n    password: str = Field(..., min_length=8, max_length=40)\n    full_name: Optional[str] = Field(default=None, max_length=255)\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = Field(default=None, max_length=255)\n    password: Optional[str] = Field(default=None, min_length=8, max_length=40)\n    is_active: Optional[bool] = None\n    is_superuser: Optional[bool] = None\n    full_name: Optional[str] = Field(default=None, max_length=255)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserUpdate(BaseModel):\n    email: Optional[EmailStr] = Field(default=None, max_length=255)\n    password: Optional[str] = Field(default=None, min_length=8, max_length=40)\n    is_active: Optional[bool] = None\n    is_superuser: Optional[bool] = None\n    full_name: Optional[str] = Field(default=None, max_length=255)\nclass UserUpdateMe(BaseModel):\n    full_name: Optional[str] = Field(default=None, max_length=255)\n    email: Optional[EmailStr] = Field(default=None, max_length=255)\nclass UpdatePassword(BaseModel):",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserUpdateMe",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserUpdateMe(BaseModel):\n    full_name: Optional[str] = Field(default=None, max_length=255)\n    email: Optional[EmailStr] = Field(default=None, max_length=255)\nclass UpdatePassword(BaseModel):\n    current_password: str = Field(..., min_length=8, max_length=40)\n    new_password: str = Field(..., min_length=8, max_length=40)\nclass User(UserBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    hashed_password: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UpdatePassword",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UpdatePassword(BaseModel):\n    current_password: str = Field(..., min_length=8, max_length=40)\n    new_password: str = Field(..., min_length=8, max_length=40)\nclass User(UserBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    hashed_password: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    model_config = ConfigDict(\n        populate_by_name=True,",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class User(UserBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    hashed_password: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    model_config = ConfigDict(\n        populate_by_name=True,\n        arbitrary_types_allowed=True,\n    )\n    @field_serializer(\"id\", when_used=\"json\")",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UserPublic(UserBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    model_config = ConfigDict(\n        populate_by_name=True,\n    )\n    @field_serializer(\"id\", when_used=\"json\")\n    def serialize_id(self, id: PyObjectId, _info):\n        return str(id)\nclass UsersPublic(BaseModel):\n    data: List[UserPublic]",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "UsersPublic",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class UsersPublic(BaseModel):\n    data: List[UserPublic]\n    count: int\nclass ItemBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=255)\n    description: Optional[str] = Field(default=None, max_length=255)\nclass ItemCreate(ItemBase):\n    pass\nclass ItemUpdate(ItemBase):\n    title: Optional[str] = Field(default=None, min_length=1, max_length=255)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "ItemBase",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class ItemBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=255)\n    description: Optional[str] = Field(default=None, max_length=255)\nclass ItemCreate(ItemBase):\n    pass\nclass ItemUpdate(ItemBase):\n    title: Optional[str] = Field(default=None, min_length=1, max_length=255)\n    description: Optional[str] = Field(default=None, max_length=255)\nclass Item(ItemBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class ItemCreate(ItemBase):\n    pass\nclass ItemUpdate(ItemBase):\n    title: Optional[str] = Field(default=None, min_length=1, max_length=255)\n    description: Optional[str] = Field(default=None, max_length=255)\nclass Item(ItemBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    owner_id: PyObjectId = Field(...)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class ItemUpdate(ItemBase):\n    title: Optional[str] = Field(default=None, min_length=1, max_length=255)\n    description: Optional[str] = Field(default=None, max_length=255)\nclass Item(ItemBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    owner_id: PyObjectId = Field(...)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    model_config = ConfigDict(\n        populate_by_name=True,",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class Item(ItemBase):\n    id: PyObjectId = Field(default_factory=PyObjectId, alias=\"_id\")\n    owner_id: PyObjectId = Field(...)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    model_config = ConfigDict(\n        populate_by_name=True,\n        arbitrary_types_allowed=True,\n    )\n    @field_serializer(\"id\", \"owner_id\", when_used=\"json\")",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "ItemPublic",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class ItemPublic(ItemBase):\n    id: PyObjectId = Field(..., alias=\"_id\")\n    owner_id: PyObjectId\n    model_config = ConfigDict(\n        populate_by_name=True,\n    )\n    @field_serializer(\"id\", \"owner_id\", when_used=\"json\")\n    def serialize_objectid(self, obj_id: PyObjectId, _info):\n        return str(obj_id)\nclass ItemsPublic(BaseModel):",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "ItemsPublic",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class ItemsPublic(BaseModel):\n    data: List[ItemPublic]\n    count: int\nclass Message(BaseModel):\n    message: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    id: str\n    full_name: str | None = \"\"",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class Message(BaseModel):\n    message: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    id: str\n    full_name: str | None = \"\"\n    email: str\nclass TokenPayload(BaseModel):\n    sub: Optional[str] = None",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    id: str\n    full_name: str | None = \"\"\n    email: str\nclass TokenPayload(BaseModel):\n    sub: Optional[str] = None\nclass NewPassword(BaseModel):\n    token: str",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class TokenPayload(BaseModel):\n    sub: Optional[str] = None\nclass NewPassword(BaseModel):\n    token: str\n    new_password: str = Field(..., min_length=8, max_length=40)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "NewPassword",
        "kind": 6,
        "importPath": "backend.app.models",
        "description": "backend.app.models",
        "peekOfCode": "class NewPassword(BaseModel):\n    token: str\n    new_password: str = Field(..., min_length=8, max_length=40)",
        "detail": "backend.app.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.app.tests_pre_start",
        "description": "backend.app.tests_pre_start",
        "peekOfCode": "logger = logging.getLogger(__name__)\nmax_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:",
        "detail": "backend.app.tests_pre_start",
        "documentation": {}
    },
    {
        "label": "max_tries",
        "kind": 5,
        "importPath": "backend.app.tests_pre_start",
        "description": "backend.app.tests_pre_start",
        "peekOfCode": "max_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:\n    client = AsyncIOMotorClient(settings.MONGODB_URI)",
        "detail": "backend.app.tests_pre_start",
        "documentation": {}
    },
    {
        "label": "wait_seconds",
        "kind": 5,
        "importPath": "backend.app.tests_pre_start",
        "description": "backend.app.tests_pre_start",
        "peekOfCode": "wait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def init() -> None:\n    client = AsyncIOMotorClient(settings.MONGODB_URI)\n    # Ping the database to check if connection is working",
        "detail": "backend.app.tests_pre_start",
        "documentation": {}
    },
    {
        "label": "EmailData",
        "kind": 6,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "class EmailData:\n    html_content: str\n    subject: str\ndef render_email_template(*, template_name: str, context: dict[str, Any]) -> str:\n    template_str = (\n        Path(__file__).parent / \"email-templates\" / \"build\" / template_name\n    ).read_text()\n    html_content = Template(template_str).render(context)\n    return html_content\ndef send_email(",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "render_email_template",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def render_email_template(*, template_name: str, context: dict[str, Any]) -> str:\n    template_str = (\n        Path(__file__).parent / \"email-templates\" / \"build\" / template_name\n    ).read_text()\n    html_content = Template(template_str).render(context)\n    return html_content\ndef send_email(\n    *,\n    email_to: str,\n    subject: str = \"\",",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def send_email(\n    *,\n    email_to: str,\n    subject: str = \"\",\n    html_content: str = \"\",\n) -> None:\n    assert settings.emails_enabled, \"no provided configuration for email variables\"\n    message = emails.Message(\n        subject=subject,\n        html=html_content,",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "generate_test_email",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def generate_test_email(email_to: str) -> EmailData:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - Test email\"\n    html_content = render_email_template(\n        template_name=\"test_email.html\",\n        context={\"project_name\": settings.PROJECT_NAME, \"email\": email_to},\n    )\n    return EmailData(html_content=html_content, subject=subject)\ndef generate_reset_password_email(email_to: str, email: str, token: str) -> EmailData:\n    project_name = settings.PROJECT_NAME",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "generate_reset_password_email",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def generate_reset_password_email(email_to: str, email: str, token: str) -> EmailData:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - Password recovery for user {email}\"\n    link = f\"{settings.FRONTEND_HOST}/reset-password?token={token}\"\n    html_content = render_email_template(\n        template_name=\"reset_password.html\",\n        context={\n            \"project_name\": settings.PROJECT_NAME,\n            \"username\": email,\n            \"email\": email_to,",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "generate_new_account_email",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def generate_new_account_email(\n    email_to: str, username: str, password: str\n) -> EmailData:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - New account for user {username}\"\n    html_content = render_email_template(\n        template_name=\"new_account.html\",\n        context={\n            \"project_name\": settings.PROJECT_NAME,\n            \"username\": username,",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def generate_password_reset_token(email: str) -> str:\n    delta = timedelta(hours=settings.EMAIL_RESET_TOKEN_EXPIRE_HOURS)\n    now = datetime.now(timezone.utc)\n    expires = now + delta\n    exp = expires.timestamp()\n    encoded_jwt = jwt.encode(\n        {\"exp\": exp, \"nbf\": now, \"sub\": email},\n        settings.SECRET_KEY,\n        algorithm=security.ALGORITHM,\n    )",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "kind": 2,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "def verify_password_reset_token(token: str) -> str | None:\n    try:\n        decoded_token = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[security.ALGORITHM]\n        )\n        return str(decoded_token[\"sub\"])\n    except InvalidTokenError:\n        return None",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.app.utils",
        "description": "backend.app.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass EmailData:\n    html_content: str\n    subject: str\ndef render_email_template(*, template_name: str, context: dict[str, Any]) -> str:\n    template_str = (\n        Path(__file__).parent / \"email-templates\" / \"build\" / template_name\n    ).read_text()\n    html_content = Template(template_str).render(context)",
        "detail": "backend.app.utils",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]